[source, csharp]
----
d => d
.Settings(s => s
	.Add("any.setting", "can be set")
	.NumberOfShards(1)
	.NumberOfReplicas(2)
	.AutoExpandReplicas("1-3")
	.BlocksMetadata()
	.BlocksRead()
	.BlocksReadOnly()
	.BlocksWrite()
	.Priority(11)
	.RecoveryInitialShards(RecoveryInitialShards.FullMinusOne)
	.TotalShardsPerNode(10)
	.UnassignedNodeLeftDelayedTimeout(TimeSpan.FromMinutes(1))
	.RefreshInterval(-1)
	.FileSystemStorageImplementation(FileSystemStorageImplementation.MMap)
	.Merge(this.MergeSettings)
	.SlowLog(this.SlowLogSettings)
	.Translog(this.TranslogSettings)
	.Analysis(this.AnalysisSettings)
)
.Mappings(mappings => mappings
	.Map<Project>(map => map
		//.AutoMap()
		.Properties(props => props
.String(s => s
	.Name(p => p.Name)
	.Analyzer("mySnow")
	.IncludeInAll(false)
	.Fields(f => f
		.String(ss => ss.Name("sort").NotAnalyzed())
	)
)
		)
	)
)
.Warmers(warmers => warmers
	.Warm<Project>("projects_match_all", w => w
		.Source(s => s
.MatchAll()
		)
	)
)
.Aliases(aliases=>aliases
	.Alias("alias_1")
	.Alias("alias_2", a=>a
		.IndexRouting("kimchy")
		.SearchRouting("shay")
		.Filter<Project>(f=>f
.Term(t=>t.OnField(p=>p.Name).Value("hello"))
		)
	)
)
.Similarity(similarity=>similarity
	.Add("bm", new BM25Similarity { })
)
----
[source, csharp]
----
new CreateIndexRequest(IndexName)
		{
		}
----
