[source, csharp]
----
var client = this.GetClient();
var dict = new Dictionary<string, IResponse>
				{
					{"fluent", fluent(client, this.Fluent)},
					{"fluentAsync", await fluentAsync(client, this.Fluent)},
					{"initializer", request(client, this.Initializer)},
					{"initializerAsync", await requestAsync(client, this.Initializer)}
				};
var responses = await this._responses;
var response = kv.Value as TResponse;
assert(response);
var paths = (this.UrlPath ?? "").Split(new [] { '?' }, 2);
string path = paths.First(), query = string.Empty;
query = paths.Last();
var expectedUri = new UriBuilder("http","localhost", IntegrationPort, path, query).Uri;
uriThatClientHit.AbsolutePath.Should().Be(expectedUri.AbsolutePath);
var queries = new[] {uriThatClientHit.Query, expectedUri.Query};
query.First().Should().Be(query.Last());
var clientKeyValues = uriThatClientHit.Query.Split('&')
				.SelectMany(v => v.Split('='))
				.ToDictionary(k => k[0], v => v);
var expectedKeyValues = expectedUri.Query.Split('&')
				.SelectMany(v => v.Split('='))
				.ToDictionary(k => k[0], v => v);
clientKeyValues.Should().Equal(expectedKeyValues);
----
