A special single bucket aggregation that enables aggregating from buckets on parent document types to
buckets on child documents.
Be sure to read the elasticsearch documentation {ref}/search-aggregations-bucket-children-aggregation.html[on this subject here]

To use the child aggregation you have to make sure 
a `_parent` mapping is in place, here we create the project
index with two mapped types, `project` and `commitactivity` and 
we add a `_parent` mapping from `commitactivity` to `parent` 

[source, csharp]
----
var createProjectIndex = TestClient.GetClient().CreateIndex(typeof(Project), c => c
	.Mappings(map=>map
		.Map<Project>(m=>m.AutoMap())
		.Map<CommitActivity>(m=>m
.SetParent<Project>()
		)
	)
);
----
[source, csharp]
----
s => s
.Aggregations(aggs=>aggs
	.Children<CommitActivity>("name_of_child_agg", child => child
		.Aggregations(childAggs=>childAggs
			.Average("average_per_child", avg=>avg.Field(p=>p.ConfidenceFactor))
			.Max("max_per_child", avg=>avg.Field(p=>p.ConfidenceFactor))
		)
	)
)
----
[source, csharp]
----
new SearchRequest<Project>
{
	Aggregations = new Dictionary<string, IAggregationContainer>
	{
		{"name_of_child_agg", new AggregationContainer
		{
			Children = new ChildrenAggregator
			{
Type = typeof(CommitActivity)
			},
			Aggregations = new Dictionary<string, IAggregationContainer>
			{
{"average_per_child", new AggregationContainer
{
	Average = new AverageAggregator { Field = "confidenceFactor"}
} },
{"max_per_child", new AggregationContainer
{
	Max = new MaxAggregator { Field = "confidenceFactor"}
} }
			}
		}
		}
	}
}
----
[source, csharp]
----
new SearchRequest<Project>
{
	Aggregations = new ChildrenAgg("name_of_child_agg", typeof(CommitActivity))
	{
		Aggregations = 
			new AverageAgg("average_per_child", Field<CommitActivity>(p=>p.ConfidenceFactor))
			&& new MaxAgg("max_per_child", Field<CommitActivity>(p=>p.ConfidenceFactor))
	}
}
----
