A multi-bucket aggregation similar to the histogram except it can only be applied on date values. 
From a functionality perspective, this histogram supports the same features as the normal histogram. 
The main difference is that the interval can be specified by date/time expressions.
Be sure to read the elasticsearch documentation {ref}/search-aggregations-bucket-datehistogram-aggregation.html[on this subject here]

[source, csharp]
----
s => s
.Aggregations(aggs => aggs
	.DateHistogram("projects_started_per_month", date => date
		.Field(p => p.StartedOn)
		.Interval(DateInterval.Month)
		.MinimumDocumentCount(2)
		.ExtendedBounds(FixedDate.AddYears(-1), FixedDate.AddYears(1))
		.Order(HistogramOrder.CountAscending)
		.Aggregations(childAggs => childAggs
			.Terms("project_tags", avg => avg.Field(p => p.Tags))
		)
	)
)
----
[source, csharp]
----
new SearchRequest<Project>
{
	Aggregations = new DateHistogramAgg("projects_started_per_month")
	{
		Field = Field<Project>(p=>p.StartedOn),
		Interval = DateInterval.Month,
		MinimumDocumentCount = 2,
		ExtendedBounds = new ExtendedBounds<DateTime>
		{
			Minimum = FixedDate.AddYears(-1),
			Maximum = FixedDate.AddYears(1),
		},
		Order = HistogramOrder.CountAscending,
		Aggregations =
			new TermsAgg("project_tags") { Field = Field<Project>(p => p.Tags) }
	}
}
----
Using the `.Agg` aggregation helper we can fetch our aggregation results easily 
in the correct type. [Be sure to read more about `.Agg` vs `.Aggregations` on the response here]()

Time units are specified as a union of either a `DateInterval` or `TimeUnitExpression`
both of which implicitly convert to the `Union` of these two.

[source, csharp]
----
Expect("month").WhenSerializing<Union<DateInterval, TimeUnitExpression>>(DateInterval.Month);
----
[source, csharp]
----
Expect("day").WhenSerializing<Union<DateInterval, TimeUnitExpression>>(DateInterval.Day);
Expect("hour").WhenSerializing<Union<DateInterval, TimeUnitExpression>>(DateInterval.Hour);
Expect("minute").WhenSerializing<Union<DateInterval, TimeUnitExpression>>(DateInterval.Minute);
Expect("quarter").WhenSerializing<Union<DateInterval, TimeUnitExpression>>(DateInterval.Quarter);
Expect("second").WhenSerializing<Union<DateInterval, TimeUnitExpression>>(DateInterval.Second);
Expect("week").WhenSerializing<Union<DateInterval, TimeUnitExpression>>(DateInterval.Week);
Expect("year").WhenSerializing<Union<DateInterval, TimeUnitExpression>>(DateInterval.Year);
Expect("2d").WhenSerializing<Union<DateInterval, TimeUnitExpression>>((TimeUnitExpression)"2d");
Expect("1.16w").WhenSerializing<Union<DateInterval, TimeUnitExpression>>((TimeUnitExpression)TimeSpan.FromDays(8.1));
----
