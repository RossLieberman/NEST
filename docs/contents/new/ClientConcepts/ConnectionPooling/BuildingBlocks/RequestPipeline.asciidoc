== Request pipeline
Every request is executed in the context of `RequestPipeline` when you are using the default `ITransport` implementation.


[source, csharp]
----
var settings = TestClient.CreateSettings();
----
When calling Request(Async) on Transport the whole coordination of the request is deferred to a new instance in a `using` block. 

[source, csharp]
----
var pipeline = new RequestPipeline(settings, new DateTimeProvider(), new MemoryStreamFactory(), new RequestParameters());
----
[source, csharp]
----
pipeline.GetType().Should().Implement<IDisposable>();
----
However the transport does not instantiate RequestPipeline directly, it uses a pluggable `IRequestPipelineFactory`

[source, csharp]
----
var requestPipelineFactory = new RequestPipelineFactory();
----
[source, csharp]
----
var requestPipeline = requestPipelineFactory.Create(settings, new DateTimeProvider(), new MemoryStreamFactory(), new RequestParameters());
requestPipeline.Should().BeOfType<RequestPipeline>();
requestPipeline.GetType().Should().Implement<IDisposable>();
----
which can be passed to the transport when instantiating a client 

[source, csharp]
----
var transport = new Transport<ConnectionSettings>(settings, requestPipelineFactory, new DateTimeProvider(), new MemoryStreamFactory());
----
this allows you to have requests executed on your own custom request pipeline 

[source, csharp]
----
var singleNodePipeline = CreatePipeline(uris => new SingleNodeConnectionPool(uris.First()));
var staticPipeline = CreatePipeline(uris => new StaticConnectionPool(uris));
var sniffingConnectionPool = CreatePipeline(uris => new SniffingConnectionPool(uris));
----
Here we have setup three pipelines using three different connection pools, lets see how they behave

[source, csharp]
----
singleNodePipeline.FirstPoolUsageNeedsSniffing.Should().BeFalse();
----
[source, csharp]
----
staticPipeline.FirstPoolUsageNeedsSniffing.Should().BeFalse();
sniffingConnectionPool.FirstPoolUsageNeedsSniffing.Should().BeTrue();
----
Only the cluster that supports reseeding will opt in to FirstPoolUsageNeedsSniffing() 
You can however disable this on ConnectionSettings

[source, csharp]
----
sniffingConnectionPool = CreatePipeline(uris => new SniffingConnectionPool(uris), s => s.SniffOnStartup(false));
----
[source, csharp]
----
sniffingConnectionPool.FirstPoolUsageNeedsSniffing.Should().BeFalse();
----
