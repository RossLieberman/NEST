Round Robin - Skipping Dead Nodes
When selecting nodes the connection pool will try and skip all the nodes that are marked dead.

== GetNext
GetNext is implemented in a lock free thread safe fashion, meaning each callee gets returned its own cursor to advance
over the internal list of nodes. This to guarantee each request that needs to fall over tries all the nodes without
suffering from noisy neighboors advancing a global cursor.

[source, csharp]
----
var seeds = Enumerable.Range(9200, NumberOfNodes).Select(p => new Node(new Uri("http://localhost:" + p))).ToList();
seeds.First().MarkDead(DateTime.Now.AddDays(1));
var pool = new StaticConnectionPool(seeds, randomize: false);
var node = pool.CreateView().First();
node.Uri.Port.Should().Be(9201);
node = pool.CreateView().First();
node.Uri.Port.Should().Be(9202);
----
After we marke the first node alive again we expect it to be hit again

[source, csharp]
----
seeds.First().MarkAlive();
----
[source, csharp]
----
var node = pool.CreateView().First();
node.Uri.Port.Should().Be(9201);
node = pool.CreateView().First();
node.Uri.Port.Should().Be(9202);
node = pool.CreateView().First();
node.Uri.Port.Should().Be(9200);
var dateTimeProvider = new TestableDateTimeProvider();
var seeds = Enumerable.Range(9200, NumberOfNodes).Select(p => new Node(new Uri("http://localhost:" + p))).ToList();
seeds.First().MarkDead(dateTimeProvider.Now().AddDays(1));
var pool = new StaticConnectionPool(seeds, randomize: false, dateTimeProvider: dateTimeProvider);
var node = pool.CreateView().First();
node.Uri.Port.Should().Be(9201);
node = pool.CreateView().First();
node.Uri.Port.Should().Be(9202);
----
If we forward our clock 2 days the node that was marked dead until tomorrow (or yesterday!) should be resurrected 

[source, csharp]
----
dateTimeProvider.ChangeTime(d => d.AddDays(2));
----
[source, csharp]
----
var n = pool.CreateView().First();
n.Uri.Port.Should().Be(9201);
n = pool.CreateView().First();
n.Uri.Port.Should().Be(9202);
n = pool.CreateView().First();
n.Uri.Port.Should().Be(9200);
n.IsResurrected.Should().BeTrue();
----
