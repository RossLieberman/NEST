== Elasticsearch.Net

A low level, dependency free, client that has no opinions how you build and represent your requests and responses.  

This page only provides a quick overview -- the full documentation can be found at http://nest.azurewebsites.net.

=== Installing

From the Package Manager Console inside Visual Studio:

[source,sh]
------------------------------------
PM > Install-Package Elasticsearch.Net
------------------------------------

Or search for `Elasticsearch.Net` in the Package Manager GUI.

=== Connecting

[source,c#]
------------------------------------
var node = new Uri("http://localhost:9200");
var config = new ConnectionConfiguration(node);
var client = new ElasticsearchClient(config);
------------------------------------

=== Calling an API Endpoint

Elasticsearch.Net is generated from the https://github.com/elasticsearch/elasticsearch/tree/master/rest-api-spec/api[the official client REST specification], and thus maps to all Elasticsearch API endpoints.

[source,c#]
------------------------------------
client.GetSource("myindex","mytype","1",qs=>qs
    .Routing("routingvalue")
);
------------------------------------

Will execute a `GET` to `/myindex/mytype/1/_source?routing=routingvalue`.  All the methods and arguments are fully documented based on the documentation of the specification.

As you can see Elasticsearch.Net also strongly types the querystring parameters that it knows exist on an endpoint with full Intellisense documentation.  Unknown querystring parameters can still be added:

[source,c#]
------------------------------------
client.GetSource("myindex","mytype","1",qs=>qs
    .Routing("routingvalue")
    .Add("key","value")
);
------------------------------------

The querystring parameter is always optional.

=== Providing a Request Body

You can specify a request body directly with a string:

[source,c#]
------------------------------------
var myJson = @"{ ""hello"" : ""world"" }";
client.Index("myindex","mytype","1", myJson);
------------------------------------

This will execute a `POST` to `/myindex/mytype/1` with the provided string `myJson` passed verbatim as request body.

Alternatively, you can specify an anonymous object:

[source,c#]
------------------------------------
var myJson = new { hello = "world" };
client.Index("myindex","mytype","1", myJson);
------------------------------------

This will execute the same request, but this time `myJson` will be serialized by the registered `ISerializer`.

=== full documentation

For the full documentation, please visit: http://nest.azurewebsites.net.
