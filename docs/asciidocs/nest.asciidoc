== NEST

A high level client that provides a strongly typed query DSL that maps one-to-one with the Elasticsearch query DSL, and takes advantage of specific .NET features such as covariant results.  NEST internally uses, and still exposes, the low level Elasticsearch.Net client.

This page only provides a quick overview -- the full documentation can be found at http://nest.azurewebsites.net.

=== Installing

From the Package Manager Console inside Visual Studio:

[source,sh]
------------------------------------
PM > Install-Package NEST
------------------------------------

Or search for `NEST` in the Package Manager GUI.

=== Connecting

[source,c#]
------------------------------------
var node = new Uri("http://localhost:9200");

var settings = new ConnectionSettings(
    node, 
    defaultIndex: "my-application"
);

var client = new ElasticClient(settings);
------------------------------------

=== Indexing

Imagine we have the following POCO that we want to index into Elasticsearch:

[source,c#]
------------------------------------
public class Person
{
    public string Id { get; set; }
    public string Firstname { get; set; }
    public string Lastname { get; set; }
}
------------------------------------

Indexing is as simple as:

[source,c#]
------------------------------------
var person = new Person
{
    Id = "1",
    Firstname = "Martijn",
    Lastname = "Laarman"
};

var index = client.Index(person);
------------------------------------

This will index the object to `/my-application/person/1`.  NEST is smart enough to infer the index and type name for the `Person` CLR type.  It was also able to get the id of `1` through convention, by looking for an `Id` property on the specified object.  Which property it will use for the id can also be specified using the `ElasticType` attribute.

You can also override all the defaults for this one call.  NEST inferring is very powerful, but if you want to pass explicit values you can always do so:

[source,c#]
------------------------------------
var index = client.Index(person, i=>i
    .Index("another-index")
    .Type("another-type")
    .Id("1-should-not-be-the-id")
    .Refresh()
    .Ttl("1m")
);
------------------------------------

=== Searching

Now that we have indexed some documents we can begin to search for them.

[source,c#]
------------------------------------
var results = client.Search<Person>(s=>s
    .From(0)
    .Size(10)
    .Query(q=>q
         .Term(p=>p.Firstname, "martijn")
    )
);
------------------------------------

`results.Documents` now holds the first 10 people it knows who's first name is `Martijn`.

Again the same inferring rules apply as this will hit `/my-application/person/_search` and the same rule that inferring can be overridden also applies.

[source,c#]
------------------------------------
// uses /other-index/other-type/_search
var searchResults = client.Search<Person>(s=>s
    .Index("other-index")
    .OtherType("other-type")
);

// uses /_all/person/_search
var searchResults = client.Search<Person>(s=>s
   .AllIndices()
);

// uses /_search
var searchResults = client.Search<Person>(s=>s
    .AllIndices()
    .AllTypes() 
);
------------------------------------

=== Handling Responses

All the return objects from API calls in NEST client implement:

[source,c#]
------------------------------------
public interface IResponse
{
    bool IsValid { get; }
    IElasticsearchResponse ConnectionStatus { get; }
    ElasticInferrer Infer { get; }
}
------------------------------------

`IsValid` will return whether a response is valid or not. A response is usually only valid when an HTTP return result in the 200 range was returned. Some calls allow for 404 to be a valid response too, however.

If a response returns 200 in Elasticsearch, sometimes it will contain more information on the validity of the call inside its response. It's highly recommended to read the Elasticsearch documentation for a call and check for these properties on the response as well.

=== full documentation

For the full documentation, please visit: http://nest.azurewebsites.net.
